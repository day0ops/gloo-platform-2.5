# Release name.
name: istio-ingressgateway-${REVISION}
labels:
  # Set a unique label for the gateway so that virtual gateways
  # can select this workload.
  app: istio-ingressgateway-${REVISION}
  istio: ingressgateway
  revision: ${REVISION}
  # Matches spec.values.global.network in the istiod deployment
  topology.istio.io/network: $CLUSTER_NAME

# Revision declares which revision this gateway is a part of
revision: "${REVISION}"

imagePullSecrets: []

replicaCount: 1

global:
  # Solo.io Istio distribution repository; required for Gloo Mesh Istio.
  # You get the repo key from your Solo Account Representative.
  hub: ${ISTIO_SOLO_REPO}
  # Any Solo.io Gloo Mesh Istio tag
  tag: ${ISTIO_SOLO_VERSION}
  # Required for connecting VirtualMachines to the mesh
  network: ${CLUSTER_NAME}
  # Required for annotating Istio metrics with the cluster name.
  # Must match the trustDomain
  multiCluster:
    clusterName: ${CLUSTER_NAME}

rbac:
  # If enabled, roles will be created to enable accessing certificates from Gateways. This is not needed
  # when using http://gateway-api.org/.
  enabled: true

serviceAccount:
  # If set, a service account will be created. Otherwise, the default is used
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set, the release name is used
  name: ""

podAnnotations:
  prometheus.io/port: "15020"
  prometheus.io/scrape: "true"
  prometheus.io/path: "/stats/prometheus"
  inject.istio.io/templates: "gateway"
  sidecar.istio.io/inject: "true"

# Define the security context for the pod.
# If unset, this will be automatically set to the minimum privileges required to bind to port 80 and 443.
# On Kubernetes 1.22+, this only requires the `net.ipv4.ip_unprivileged_port_start` sysctl.
securityContext: ~
containerSecurityContext: ~

service:
  # Type of service. Set to "None" to disable the service entirely
  type: LoadBalancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-ip-address-type: ${NLB_LB_ADDRESS_TYPE}
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /healthz/ready
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "15021"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: http
    external-dns.alpha.kubernetes.io/hostname: apps.${DOMAIN_NAME}
  ports:
    # Health check port. For AWS ELBs, this port must be listed first.
    - name: tcp-status-port
      port: 15021
      protocol: TCP
      targetPort: 15021
    - name: http2
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: ""

resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 2000m
    memory: 1024Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

# Pod environment variables
env:
  # Required by Gloo Mesh for east/west routing
  # sni-dnat adds the clusters required for AUTO_PASSTHROUGH mode
  ISTIO_META_ROUTER_MODE: "sni-dnat"

# Annotations to apply to all resources
annotations: {}

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app
              operator: In
              values:
                - istio-ingressgateway-${REVISION}
        topologyKey: kubernetes.io/hostname